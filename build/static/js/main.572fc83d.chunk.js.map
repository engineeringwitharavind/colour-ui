{"version":3,"sources":["constants/index.js","components/App/GlobalStyles.js","components/Loader/Loader.js","components/ColorCard/ColorCard.js","components/ColorCardsGrid/ColorCardsGrid.js","components/PaletteItem/PaletteItem.js","components/SearchTextInput/SearchTextInput.js","components/App/App.js","index.js"],"names":["COLORS","BREAKPOINTS","concat","GlobalStyles","createGlobalStyle","_templateObject","_taggedTemplateLiteral","Wrapper","styled","div","Loader","_jsx","children","HexValue","span","_templateObject2","ColorCard","_ref","color","style","backgroundColor","Grid","ColorGrid","dominantColors","Math","ceil","length","map","index","Card","PaletteItem","imageUrl","onDominantColor","data","loading","error","usePalette","processed","setProcessed","React","useState","useEffect","dominantColor","lightVibrant","Form","form","Input","input","_templateObject3","SearchTextInput","searchQuery","setSearchQuery","imageThumbnails","setImageThumbnails","setDominantColors","isLoading","setIsLoading","handleDominantColor","newColor","currentColors","_jsxs","onSubmit","async","event","preventDefault","imagesFetchURL","process","response","fetch","ok","Error","status","json","items","forEach","item","currentThumbnails","image","thumbnailLink","console","fetchRelatedColors","htmlFor","required","id","type","value","onChange","target","Header","h1","Description","p","App","dotenv","config","rootElement","document","getElementById","createRoot","render","StrictMode","StyleSheetManager","disableVendorPrefixes","Fragment"],"mappings":"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","file":"static/js/main.572fc83d.chunk.js","sourcesContent":["export const COLORS = {\r\n  primary: 'hsl(245deg, 100%, 85%)',\r\n  secondary: 'hsl(333deg 100% 55%)',\r\n  decorative: 'hsl(60deg, 100%, 80%)',\r\n  background: 'hsl(210deg, 40%, 10%)',\r\n  text: 'hsl(0deg, 0%, 100%)',\r\n  black: 'hsl(0deg, 0%, 0%)',\r\n  hover: 'hsl(240deg, 100%, 70%)',\r\n  disabled: 'hsl(0deg, 0%, 30%)',\r\n};\r\n\r\nexport const BREAKPOINTS = {\r\n  tabletMin: 550,\r\n  laptopMin: 1100,\r\n  desktopMin: 1500,\r\n};\r\n\r\nexport const QUERIES = {\r\n  tabletAndUp: `(min-width: ${BREAKPOINTS.tabletMin}px)`,\r\n  laptopAndUp: `(min-width: ${BREAKPOINTS.laptopMin}px)`,\r\n  desktopAndUp: `(min-width: ${BREAKPOINTS.desktopMin}px)`,\r\n};\r\n","import { createGlobalStyle } from 'styled-components';\nimport { COLORS } from '../../constants';\n\nconst GlobalStyles = createGlobalStyle`  \n  /* Intuitive Box model and removing default margin and padding */\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n\n\n  html,\n  body {\n    color: ${COLORS.text};\n    background: ${COLORS.background};\n    \n  /* Typographic tweaks: Accessible line-height and improves text-rendering */\n    line-height: 1.5;\n  \ttext-rendering: optimizeSpeed;\n\t  -webkit-font-smoothing: antialiased;\n  }\n\n  html,\n  body,\n  #root {\n    height: 100%;\n    min-width: 300px;\n    font-family: \"Gill Sans\", sans-serif;\n  }\n\n  /* Improve media defaults */\n  img,\n  picture,\n  video,\n  canvas,\n  svg {\n    display: block;\n    max-width: 100%;\n  }\n\n  /* Remove built-in form typography styles */\n  input,\n  button,\n  textarea,\n  select {\n    font: inherit;\n  }\n\n  /* Avoid text-overflows */\n  p,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    overflow-wrap: break-word;\n  }\n\n  /* Accessible and custom Typgraphy */\n  h1 {\n    font-size: 1.6rem;\n  }\n\n  h2 {\n    font-size: 1.5rem;\n  }\n\n  h3 {\n    font-size: 1.4rem;\n  }\n\n  h4 {\n    font-size: 1.3rem;\n  }\n\n  h5 {\n    font-size: 1.2rem;\n  }\n\n  h6 {\n    font-size: 1.1rem;\n  }\n\n  ul,\n  ol {\n    list-style: none;\n  }\n\n  a,\n  a:hover,\n  a:active,\n  a:focus {\n    text-decoration: none;\n    font: inherit;\n  }\n\n  /* Create a root stacking context */\n  #root {\n    isolation: isolate;\n  }\n`;\n\nexport default GlobalStyles;\n","import React from 'react';\nimport styled from 'styled-components';\n\nfunction Loader() {\n  return <Wrapper>Fetching Data...</Wrapper>;\n}\n\nconst Wrapper = styled.div`\n  text-align: center;\n  font-size: 1.2rem;\n`;\n\nexport default Loader;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { COLORS } from '../../constants';\n\nfunction ColorCard({ color }) {\n  return (\n    <Wrapper style={{ backgroundColor: color }}>\n      <HexValue>{color}</HexValue>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 150px;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: ${COLORS.text};\n  font-size: 1.2rem;\n`;\n\nconst HexValue = styled.span`\n  font-size: 1.2rem;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 4px 8px;\n  border-radius: 4px;\n`;\n\nexport default ColorCard;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Card from '../ColorCard';\n\nfunction ColorGrid({ dominantColors }) {\n  const numberOfColumns = Math.ceil(dominantColors.length / 5); // Five children per row\n\n  return (\n    <Grid>\n      {dominantColors.map((color, index) => (\n        <Card key={index} color={color} />\n      ))}\n    </Grid>\n  );\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n  grid-gap: 16px;\n  width: 100%;\n`;\n\nexport default ColorGrid;\n","import React from 'react';\nimport { usePalette } from 'react-palette';\n\nfunction PaletteItem({ imageUrl, onDominantColor }) {\n  const { data, loading, error } = usePalette(imageUrl);\n  const [processed, setProcessed] = React.useState(false); // Track whether the URL has been processed\n\n  React.useEffect(() => {\n    if (!processed && !loading && !error) {\n      const dominantColor = data.lightVibrant;\n      if (dominantColor) {\n        onDominantColor(dominantColor);\n      }\n      setProcessed(true); // Mark the URL as processed\n    }\n  }, [data, loading, error, onDominantColor, imageUrl, processed]);\n\n  if (loading || error) {\n    return null;\n  }\n\n  return null;\n}\n\nexport default PaletteItem;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Loader from '../Loader/Loader';\nimport ColorGrid from '../ColorCardsGrid';\nimport PaletteItem from '../PaletteItem/PaletteItem';\nimport { COLORS } from '../../constants';\n\nfunction SearchTextInput() {\n  const [searchQuery, setSearchQuery] = React.useState('');\n  const [imageThumbnails, setImageThumbnails] = React.useState([]);\n  const [dominantColors, setDominantColors] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const searchEngineId = process.env.REACT_APP_SEARCH_ENGINE_ID;\n  const searchApiKey = process.env.REACT_APP_SEARCH_API_KEY;\n\n  const fetchRelatedColors = async () => {\n    setIsLoading(true);\n    const imagesFetchURL = `https://www.googleapis.com/customsearch/v1?key=${searchApiKey}&cx=${searchEngineId}&q=${searchQuery}&searchType=image`;\n\n    try {\n      const response = await fetch(imagesFetchURL);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const items = data.items;\n\n      items.forEach((item) => {\n        setImageThumbnails((currentThumbnails) => [\n          ...currentThumbnails,\n          item.image.thumbnailLink,\n        ]);\n      });\n    } catch (error) {\n      console.error('[Error fetching data]: ', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setImageThumbnails([]);\n    setDominantColors([]);\n    fetchRelatedColors();\n    setSearchQuery('');\n  };\n\n  const handleDominantColor = (newColor) => {\n    setDominantColors((currentColors) => [...currentColors, newColor]);\n  };\n\n  return (\n    <Wrapper>\n      <Form onSubmit={handleSubmit}>\n        <label htmlFor='search-query'>Enter your text:</label>\n        <Input\n          required\n          id='search-query'\n          type='text'\n          value={searchQuery}\n          onChange={(event) => {\n            setSearchQuery(event.target.value);\n          }}\n        />\n      </Form>\n      {isLoading ? <Loader /> : <ColorGrid dominantColors={dominantColors} />}\n      {imageThumbnails.map((imageUrl, index) => (\n        <PaletteItem\n          key={index}\n          imageUrl={imageUrl}\n          onDominantColor={handleDominantColor}\n        />\n      ))}\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  padding: 48px;\n  align-items: center;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  font-size: 1.2rem;\n  max-width: 400px;\n  width: 100%;\n  color: ${COLORS.decorative};\n  font-weight: 600;\n`;\n\nconst Input = styled.input`\n  padding: 8px;\n  border-radius: 8px;\n  color: ${COLORS.black};\n`;\n\nexport default SearchTextInput;\n","import React from 'react';\nimport SearchTextInput from '../SearchTextInput';\nimport styled from 'styled-components';\nimport { COLORS } from '../../constants';\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Header>Hue Sync</Header>\n      <Description>\n        Discover dominant color palettes related to your search query!\n      </Description>\n      <SearchTextInput />\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 48px;\n  gap: 24px;\n`;\n\nconst Header = styled.h1`\n  text-align: center;\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: ${COLORS.primary};\n`;\n\nconst Description = styled.p`\n  text-align: center;\n  font-size: 1.2rem;\n  font-weight: 600;\n`;\n\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { StyleSheetManager } from 'styled-components';\nimport GlobalStyles from '../src/components/App/GlobalStyles';\nimport App from '../src/components/App/App';\nimport dotenv from 'dotenv';\n\n// Load environment variables\ndotenv.config();\n\nconst rootElement = document.getElementById('root');\nconst root = createRoot(rootElement);\n\nroot.render(\n  <React.StrictMode>\n    <StyleSheetManager disableVendorPrefixes>\n      <React.Fragment>\n        <GlobalStyles />\n        <App />\n      </React.Fragment>\n    </StyleSheetManager>\n  </React.StrictMode>\n);\n"],"sourceRoot":""}